import logging
import random
import json
import os
import string
from typing import Dict
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

API_TOKEN = '8403703022:AAHGkmD5ZoAD2AF0J3ajlfBH7_eN9vwLNpU'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
USERS_DB_FILE = 'users_db.json'
ADMIN_DB_FILE = 'admin_db.json'
WIN_CODES_DB_FILE = 'win_codes_db.json'
LOG_FILE = 'bot_logs.txt'

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_db: Dict[int, Dict] = {}
admin_db = {
    'stars_balance': 0,
    'settings': {
        'ball1_cost': 5,
        'ball2_cost': 3,
        'ball3_cost': 1,
        'ball1_chance': 0.2,
        'ball2_chance': 0.4,
        'ball3_chance': 0.6,
        'min_withdraw': 50
    }
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–¥–æ–≤
win_codes_db = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_data():
    global users_db, admin_db, win_codes_db
    
    try:
        if os.path.exists(USERS_DB_FILE):
            with open(USERS_DB_FILE, 'r', encoding='utf-8') as f:
                users_db = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Å—Ç—Ä–æ–∫ –≤ int (—Ç–∞–∫ –∫–∞–∫ JSON –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∏)
                users_db = {int(k): v for k, v in users_db.items()}
                log_event("SYSTEM", f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {USERS_DB_FILE}")
    
    except Exception as e:
        log_event("SYSTEM", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users_db: {str(e)}")
        users_db = {}

    try:
        if os.path.exists(ADMIN_DB_FILE):
            with open(ADMIN_DB_FILE, 'r', encoding='utf-8') as f:
                admin_db = json.load(f)
                log_event("SYSTEM", f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ –∏–∑ {ADMIN_DB_FILE}")
    except Exception as e:
        log_event("SYSTEM", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ admin_db: {str(e)}")
        admin_db = {
            'stars_balance': 0,
            'settings': {
                'ball1_cost': 5,
                'ball2_cost': 3,
                'ball3_cost': 1,
                'ball1_chance': 0.2,
                'ball2_chance': 0.4,
                'ball3_chance': 0.6,
                'min_withdraw': 50
            }
        }
    
    try:
        if os.path.exists(WIN_CODES_DB_FILE):
            with open(WIN_CODES_DB_FILE, 'r', encoding='utf-8') as f:
                win_codes_db = json.load(f)
                log_event("SYSTEM", f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ–¥—ã –≤—ã–∏–≥—Ä—ã—à–µ–π –∏–∑ {WIN_CODES_DB_FILE}")
    except Exception as e:
        log_event("SYSTEM", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ win_codes_db: {str(e)}")
        win_codes_db = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    try:
        with open(USERS_DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_db, f, ensure_ascii=False, indent=4)
        
        with open(ADMIN_DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(admin_db, f, ensure_ascii=False, indent=4)
            
        with open(WIN_CODES_DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(win_codes_db, f, ensure_ascii=False, indent=4)
            
        log_event("SYSTEM", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        log_event("SYSTEM", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
def log_event(user_id: str, event: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] UserID: {user_id} - {event}\n"
    
    try:
        with open(LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(log_entry)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {str(e)}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_win_code(length=8):
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PaymentState(StatesGroup):
    waiting_for_custom_amount = State()
    waiting_for_admin_password = State()
    waiting_for_settings_change = State()
    waiting_for_withdraw_amount = State()
    waiting_for_user_id = State()
    waiting_for_stars_amount = State()
    waiting_for_win_code = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å")],
            [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )

def get_game_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"1 –º—è—á ({admin_db['settings']['ball1_cost']}‚≠ê)")],
            [KeyboardButton(text=f"2 –º—è—á–∞ ({admin_db['settings']['ball2_cost']}‚≠ê)")],
            [KeyboardButton(text=f"3 –º—è—á–∞ ({admin_db['settings']['ball3_cost']}‚≠ê)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_payment_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="5‚≠ê"), KeyboardButton(text="10‚≠ê")],
            [KeyboardButton(text="100‚≠ê")],
            [KeyboardButton(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã")],
            [KeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã")],
            [KeyboardButton(text="üìä –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –∫–æ–¥")],
            [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")]
        ],
        resize_keyboard=True
    )

def get_settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úè –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –º—è—á–∞")],
            [KeyboardButton(text="‚úè –°—Ç–æ–∏–º–æ—Å—Ç—å 2 –º—è—á–µ–π")],
            [KeyboardButton(text="‚úè –°—Ç–æ–∏–º–æ—Å—Ç—å 3 –º—è—á–µ–π")],
            [KeyboardButton(text="‚úè –®–∞–Ω—Å 1 –º—è—á–∞")],
            [KeyboardButton(text="‚úè –®–∞–Ω—Å 2 –º—è—á–µ–π")],
            [KeyboardButton(text="‚úè –®–∞–Ω—Å 3 –º—è—á–µ–π")],
            [KeyboardButton(text="‚úè –ú–∏–Ω. –≤—ã–≤–æ–¥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_user_management_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥")],
            [KeyboardButton(text="‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥")],
            [KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': 100, 
            'games_played': 0, 
            'games_won': 0,
            'is_blocked': False,
            'win_codes': []
        }
        log_event(user_id, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ù–∞—á–∏—Å–ª–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å 100‚≠ê")
    
    if users_db[user_id].get('is_blocked', False):
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    await message.answer(
        "üèÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—É—é –∏–≥—Ä—É!\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        f"- 1 –º—è—á –∑–∞ {admin_db['settings']['ball1_cost']}‚≠ê (–ø–æ–±–µ–¥–∞: 1/1)\n"
        f"- 2 –º—è—á–∞ –∑–∞ {admin_db['settings']['ball2_cost']}‚≠ê (–ø–æ–±–µ–¥–∞: 2/2)\n"
        f"- 3 –º—è—á–∞ –∑–∞ {admin_db['settings']['ball3_cost']}‚≠ê (–ø–æ–±–µ–¥–∞: 3/3)\n\n"
        f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: 100‚≠ê\n"
        "–ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ - –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–∑ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥!",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("adminpanel"))
async def admin_panel(message: types.Message, state: FSMContext):
    await state.set_state(PaymentState.waiting_for_admin_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
async def exit_admin_panel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
async def play_game(message: types.Message):
    user_id = message.from_user.id
    if users_db.get(user_id, {}).get('is_blocked', False):
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–≥—Ä—ã:", reply_markup=get_game_keyboard())

@dp.message(lambda message: message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def add_balance(message: types.Message):
    user_id = message.from_user.id
    if users_db.get(user_id, {}).get('is_blocked', False):
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_payment_keyboard())

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': 100, 
            'games_played': 0, 
            'games_won': 0,
            'is_blocked': False,
            'win_codes': []
        }
    
    stats = users_db[user_id]
    await message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {stats['balance']}‚≠ê\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['games_played']}\n"
        f"üèÜ –ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ: {stats['games_won']}\n"
        f"üîë –ö–æ–¥–æ–≤ –≤—ã–∏–≥—Ä—ã—à–∞: {len(stats.get('win_codes', []))}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–∑–æ–≤
@dp.message(lambda message: message.text.startswith("1 –º—è—á"))
async def play_one_ball(message: types.Message):
    user_id = message.from_user.id
    if users_db.get(user_id, {}).get('is_blocked', False):
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': 100, 
            'games_played': 0, 
            'games_won': 0,
            'is_blocked': False,
            'win_codes': []
        }
    
    user_data = users_db[user_id]
    cost = admin_db['settings']['ball1_cost']
    if user_data['balance'] < cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –∏–≥—Ä—ã! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        log_event(user_id, f"–ü–æ–ø—ã—Ç–∫–∞ –∏–≥—Ä—ã –≤ 1 –º—è—á (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—è—á –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("üèÄ")
    
    user_data['balance'] -= cost
    admin_db['stars_balance'] += cost
    user_data['games_played'] += 1
    
    log_event(user_id, f"–°–ø–∏—Å–∞–Ω–æ {cost}‚≠ê –∑–∞ –∏–≥—Ä—É –≤ 1 –º—è—á. –ë–∞–ª–∞–Ω—Å: {user_data['balance']}‚≠ê")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    await asyncio.sleep(2)
    
    # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–∑–æ–≤: 1/1 - –≤—ã–∏–≥—Ä–∞–ª
    hits = 1 if random.random() < admin_db['settings']['ball1_chance'] else 0
    
    if hits == 1:
        user_data['games_won'] += 1
        win_code = generate_win_code()
        user_data['win_codes'].append(win_code)
        win_codes_db[win_code] = {
            'user_id': user_id,
            'game_type': "1 –º—è—á",
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'used': False
        }
        await message.answer(
            "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–∞–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑!\n"
            f"üîë –í–∞—à –∫–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞: {win_code}\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!"
        )
        log_event(user_id, f"–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ 1 –º—è—á. –ö–æ–¥: {win_code}")
    else:
        await message.answer("‚ùå –ú—è—á –Ω–µ –ø–æ–ø–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
        log_event(user_id, "–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ 1 –º—è—á")
    
    await show_stats(message)
    save_data()

@dp.message(lambda message: message.text.startswith("2 –º—è—á–∞"))
async def play_two_balls(message: types.Message):
    user_id = message.from_user.id
    if users_db.get(user_id, {}).get('is_blocked', False):
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': 100, 
            'games_played': 0, 
            'games_won': 0,
            'is_blocked': False,
            'win_codes': []
        }
    
    user_data = users_db[user_id]
    cost = admin_db['settings']['ball2_cost']
    if user_data['balance'] < cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –∏–≥—Ä—ã! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        log_event(user_id, f"–ü–æ–ø—ã—Ç–∫–∞ –∏–≥—Ä—ã –≤ 2 –º—è—á–∞ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")
        return
    
    user_data['balance'] -= cost
    admin_db['stars_balance'] += cost
    user_data['games_played'] += 1
    
    log_event(user_id, f"–°–ø–∏—Å–∞–Ω–æ {cost}‚≠ê –∑–∞ –∏–≥—Ä—É –≤ 2 –º—è—á–∞. –ë–∞–ª–∞–Ω—Å: {user_data['balance']}‚≠ê")
    
    # –ë—Ä–æ—Å–∞–µ–º 2 –º—è—á–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    hits = 0
    
    for i in range(2):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—è—á –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("üèÄ")
        await asyncio.sleep(1.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±—Ä–æ—Å–∫–∞–º–∏
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if random.random() < admin_db['settings']['ball2_chance']:
            hits += 1
            await message.answer("‚úÖ –ü–æ–ø–∞–ª!")
        else:
            await message.answer("‚ùå –ü—Ä–æ–º–∞—Ö!")
        await asyncio.sleep(0.5)
    
    # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–∑–æ–≤: 2/2 - –≤—ã–∏–≥—Ä–∞–ª, 1/2 - –ø—Ä–æ–∏–≥—Ä–∞–ª, 0/2 - –ø—Ä–æ–∏–≥—Ä–∞–ª
    if hits == 2:
        user_data['games_won'] += 1
        win_code = generate_win_code()
        user_data['win_codes'].append(win_code)
        win_codes_db[win_code] = {
            'user_id': user_id,
            'game_type': "2 –º—è—á–∞",
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'used': False
        }
        await message.answer(
            "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–∞–ª–∏ –æ–±–∞ –º—è—á–∞ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑!\n"
            f"üîë –í–∞—à –∫–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞: {win_code}\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!"
        )
        log_event(user_id, f"–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ 2 –º—è—á–∞. –ö–æ–¥: {win_code}")
    else:
        await message.answer(f"‚ùå –í—ã –ø–æ–ø–∞–ª–∏ —Ç–æ–ª—å–∫–æ {hits} –∏–∑ 2 –º—è—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
        log_event(user_id, f"–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ 2 –º—è—á–∞ (–ø–æ–ø–∞–¥–∞–Ω–∏–π: {hits})")
    
    await show_stats(message)
    save_data()

@dp.message(lambda message: message.text.startswith("3 –º—è—á–∞"))
async def play_three_balls(message: types.Message):
    user_id = message.from_user.id
    if users_db.get(user_id, {}).get('is_blocked', False):
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': 100, 
            'games_played': 0, 
            'games_won': 0,
            'is_blocked': False,
            'win_codes': []
        }
    
    user_data = users_db[user_id]
    cost = admin_db['settings']['ball3_cost']
    if user_data['balance'] < cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –∏–≥—Ä—ã! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        log_event(user_id, f"–ü–æ–ø—ã—Ç–∫–∞ –∏–≥—Ä—ã –≤ 3 –º—è—á–∞ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")
        return
    
    user_data['balance'] -= cost
    admin_db['stars_balance'] += cost
    user_data['games_played'] += 1
    
    log_event(user_id, f"–°–ø–∏—Å–∞–Ω–æ {cost}‚≠ê –∑–∞ –∏–≥—Ä—É –≤ 3 –º—è—á–∞. –ë–∞–ª–∞–Ω—Å: {user_data['balance']}‚≠ê")
    
    # –ë—Ä–æ—Å–∞–µ–º 3 –º—è—á–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    hits = 0
    
    for i in range(3):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—è—á –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("üèÄ")
        await asyncio.sleep(1.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±—Ä–æ—Å–∫–∞–º–∏
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if random.random() < admin_db['settings']['ball3_chance']:
            hits += 1
            await message.answer("‚úÖ –ü–æ–ø–∞–ª!")
        else:
            await message.answer("‚ùå –ü—Ä–æ–º–∞—Ö!")
        await asyncio.sleep(0.5)
    
    # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–∑–æ–≤: 3/3 - –≤—ã–∏–≥—Ä–∞–ª, 2/3 - –ø—Ä–æ–∏–≥—Ä–∞–ª, 1/3 - –ø—Ä–æ–∏–≥—Ä–∞–ª, 0/3 - –ø—Ä–æ–∏–≥—Ä–∞–ª
    if hits == 3:
        user_data['games_won'] += 1
        win_code = generate_win_code()
        user_data['win_codes'].append(win_code)
        win_codes_db[win_code] = {
            'user_id': user_id,
            'game_type': "3 –º—è—á–∞",
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'used': False
        }
        await message.answer(
            "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–∞–ª–∏ –≤—Å–µ 3 –º—è—á–∞ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑!\n"
            f"üîë –í–∞—à –∫–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞: {win_code}\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!"
        )
        log_event(user_id, f"–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ 3 –º—è—á–∞. –ö–æ–¥: {win_code}")
    else:
        await message.answer(f"‚ùå –í—ã –ø–æ–ø–∞–ª–∏ —Ç–æ–ª—å–∫–æ {hits} –∏–∑ 3 –º—è—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
        log_event(user_id, f"–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ 3 –º—è—á–∞ (–ø–æ–ø–∞–¥–∞–Ω–∏–π: {hits})")
    
    await show_stats(message)
    save_data()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message(lambda message: message.text in ["5‚≠ê", "10‚≠ê", "100‚≠ê"])
async def process_payment(message: types.Message):
    amount = int(message.text.replace("‚≠ê", ""))
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–≤—ë–∑–¥–∞–º–∏", pay=True)],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ])
    
    log_event(user_id, f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount}‚≠ê")
    
    await message.answer(
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}‚≠ê –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "–î—Ä—É–≥–∞—è —Å—É–º–º–∞")
async def custom_amount(message: types.Message, state: FSMContext):
    await state.set_state(PaymentState.waiting_for_custom_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

@dp.message(PaymentState.waiting_for_custom_amount)
async def process_custom_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
        
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–≤—ë–∑–¥–∞–º–∏", pay=True)],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
        ])
        
        log_event(user_id, f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount}‚≠ê (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥)")
        
        await message.answer(
            f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}‚≠ê –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message(PaymentState.waiting_for_admin_password)
async def check_admin_password(message: types.Message, state: FSMContext):
    if message.text == "807807":
        await state.set_state(None)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_keyboard())
        log_event(message.from_user.id, "–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        log_event(message.from_user.id, f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ø–∞—Ä–æ–ª—å: {message.text})")

@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞")
async def show_bot_balance(message: types.Message):
    await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {admin_db['stars_balance']}‚≠ê")
    log_event(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞")

@dp.message(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã")
async def game_settings(message: types.Message):
    settings = admin_db['settings']
    text = (
        f"‚öô –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:\n\n"
        f"1 –º—è—á: {settings['ball1_cost']}‚≠ê (—à–∞–Ω—Å: {settings['ball1_chance']*100}%)\n"
        f"2 –º—è—á–∞: {settings['ball2_cost']}‚≠ê (—à–∞–Ω—Å: {settings['ball2_chance']*100}%)\n"
        f"3 –º—è—á–∞: {settings['ball3_cost']}‚≠ê (—à–∞–Ω—Å: {settings['ball3_chance']*100}%)\n"
        f"–ú–∏–Ω. –≤—ã–≤–æ–¥: {settings['min_withdraw']}‚≠ê"
    )
    await message.answer(text, reply_markup=get_settings_keyboard())
    log_event(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã")

@dp.message(lambda message: message.text.startswith("‚úè"))
async def change_setting(message: types.Message, state: FSMContext):
    setting_map = {
        "‚úè –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –º—è—á–∞": "ball1_cost",
        "‚úè –°—Ç–æ–∏–º–æ—Å—Ç—å 2 –º—è—á–µ–π": "ball2_cost",
        "‚úè –°—Ç–æ–∏–º–æ—Å—Ç—å 3 –º—è—á–µ–π": "ball3_cost",
        "‚úè –®–∞–Ω—Å 1 –º—è—á–∞": "ball1_chance",
        "‚úè –®–∞–Ω—Å 2 –º—è—á–µ–π": "ball2_chance",
        "‚úè –®–∞–Ω—Å 3 –º—è—á–µ–π": "ball3_chance",
        "‚úè –ú–∏–Ω. –≤—ã–≤–æ–¥": "min_withdraw"
    }
    
    setting_name = setting_map.get(message.text)
    if setting_name:
        await state.set_state(PaymentState.waiting_for_settings_change)
        await state.update_data(setting_name=setting_name)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {message.text[2:]}:")
        log_event(message.from_user.id, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {setting_name}")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

@dp.message(PaymentState.waiting_for_settings_change)
async def save_setting_change(message: types.Message, state: FSMContext):
    data = await state.get_data()
    setting_name = data.get('setting_name')
    
    try:
        if setting_name in ['ball1_chance', 'ball2_chance', 'ball3_chance']:
            value = float(message.text)
            if not 0 <= value <= 1:
                raise ValueError
        else:
            value = int(message.text)
            if value <= 0:
                raise ValueError
        
        old_value = admin_db['settings'][setting_name]
        admin_db['settings'][setting_name] = value
        await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=get_admin_keyboard())
        log_event(message.from_user.id, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_name}: {old_value} -> {value}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–¥–ª—è —à–∞–Ω—Å–∞ - –¥—Ä–æ–±–Ω–æ–µ –æ—Ç 0 –¥–æ 1)")
        return
    
    await state.clear()
    save_data()

@dp.message(lambda message: message.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def user_management(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_management_keyboard())

@dp.message(lambda message: message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥", "‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥"])
async def manage_user_stars(message: types.Message, state: FSMContext):
    action = "add" if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥" else "remove"
    await state.set_state(PaymentState.waiting_for_user_id)
    await state.update_data(action=action)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.message(PaymentState.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        data = await state.get_data()
        await state.update_data(user_id=user_id)
        await state.set_state(PaymentState.waiting_for_stars_amount)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è {'–¥–æ–±–∞–≤–ª–µ–Ω–∏—è' if data['action'] == 'add' else '—É–¥–∞–ª–µ–Ω–∏—è'}:")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)")

@dp.message(PaymentState.waiting_for_stars_amount)
async def process_stars_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
        
        data = await state.get_data()
        user_id = data['user_id']
        action = data['action']
        
        if user_id not in users_db:
            users_db[user_id] = {
                'balance': 0, 
                'games_played': 0, 
                'games_won': 0,
                'is_blocked': False,
                'win_codes': []
            }
        
        if action == "add":
            users_db[user_id]['balance'] += amount
            admin_db['stars_balance'] -= amount
            log_event(message.from_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount}‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount}‚≠ê")
        else:
            if users_db[user_id]['balance'] >= amount:
                users_db[user_id]['balance'] -= amount
                admin_db['stars_balance'] += amount
                log_event(message.from_user.id, f"–£–¥–∞–ª–µ–Ω–æ {amount}‚≠ê —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.answer(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ {amount}‚≠ê")
            else:
                await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚≠ê")
        
        save_data()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")
    finally:
        await state.clear()

@dp.message(lambda message: message.text in ["üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"])
async def manage_user_block(message: types.Message, state: FSMContext):
    action = "block" if message.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" else "unblock"
    await state.set_state(PaymentState.waiting_for_user_id)
    await state.update_data(action=action)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.message(lambda message: message.text == "üì§ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã")
async def withdraw_stars(message: types.Message, state: FSMContext):
    if admin_db['stars_balance'] < admin_db['settings']['min_withdraw']:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {admin_db['settings']['min_withdraw']}‚≠ê\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {admin_db['stars_balance']}‚≠ê"
        )
        log_event(message.from_user.id, f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {admin_db['stars_balance']}‚≠ê)")
        return
    
    await state.set_state(PaymentState.waiting_for_withdraw_amount)
    await message.answer(
        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {admin_db['stars_balance']}‚≠ê\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {admin_db['settings']['min_withdraw']}‚≠ê\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    log_event(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")

@dp.message(PaymentState.waiting_for_withdraw_amount)
async def process_withdraw(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        min_withdraw = admin_db['settings']['min_withdraw']
        
        if amount < min_withdraw:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {min_withdraw}‚≠ê")
            log_event(message.from_user.id, f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ {amount}‚≠ê (–º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞)")
            return
        
        if amount > admin_db['stars_balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞! –î–æ—Å—Ç—É–ø–Ω–æ: {admin_db['stars_balance']}‚≠ê")
            log_event(message.from_user.id, f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ {amount}‚≠ê (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")
            return
        
        admin_db['stars_balance'] -= amount
        await message.answer(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚≠ê —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {admin_db['stars_balance']}‚≠ê",
            reply_markup=get_admin_keyboard()
        )
        log_event(message.from_user.id, f"–í—ã–≤–æ–¥ {amount}‚≠ê. –û—Å—Ç–∞—Ç–æ–∫: {admin_db['stars_balance']}‚≠ê")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return
    
    await state.clear()
    save_data()

@dp.message(lambda message: message.text == "üìä –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_user_logs(message: types.Message):
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            logs = f.read()
        
        if len(logs) > 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            logs = logs[-4000:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        
        await message.answer(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n{logs}")
        log_event(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤")
        log_event(message.from_user.id, f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: {str(e)}")

@dp.message(lambda message: message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –∫–æ–¥")
async def check_win_code(message: types.Message, state: FSMContext):
    await state.set_state(PaymentState.waiting_for_win_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(PaymentState.waiting_for_win_code)
async def process_win_code_check(message: types.Message, state: FSMContext):
    win_code = message.text.upper().strip()
    
    if win_code in win_codes_db:
        code_info = win_codes_db[win_code]
        user_id = code_info['user_id']
        user_info = users_db.get(user_id, {})
        
        response = (
            f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ {win_code}:\n\n"
            f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üéÆ –¢–∏–ø –∏–≥—Ä—ã: {code_info['game_type']}\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {code_info['timestamp']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('balance', 0)}‚≠ê\n"
            f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_info.get('games_played', 0)}\n"
            f"üèÜ –ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ: {user_info.get('games_won', 0)}\n"
            f"üîë –í—Å–µ–≥–æ –∫–æ–¥–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_info.get('win_codes', []))}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–¥–∞: {'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if code_info['used'] else '–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
        
        await message.answer(response, reply_markup=get_admin_keyboard())
        log_event(message.from_user.id, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ {win_code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_admin_keyboard())
        log_event(message.from_user.id, f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞: {win_code}")
    
    await state.clear()

@dp.message(lambda message: message.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def save_data_command(message: types.Message):
    save_data()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    log_event(message.from_user.id, "–†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ-—á–µ–∫–∞—É—Ç–∞ (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message(lambda message: message.successful_payment is not None)
async def successful_payment(message: types.Message):
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount // 100  # –°—É–º–º–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
    
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': 0, 
            'games_played': 0, 
            'games_won': 0,
            'is_blocked': False,
            'win_codes': []
        }
    
    users_db[user_id]['balance'] += amount
    await message.answer(
        f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚≠ê\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚≠ê"
    )
    log_event(user_id, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}‚≠ê. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']}‚≠ê")
    save_data()

async def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_data()
    log_event("SYSTEM", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())